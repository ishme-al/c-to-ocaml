  {
    Clang.Ast.decoration = Clang.Ast.Cursor <abstr>;
   desc =
    {
        Clang.Ast.filename = "tests/test1.c";
     items =
        [
            {
                Clang.Ast.decoration = Clang.Ast.Cursor <abstr>;
                desc =
                    Clang.Ast.Function
                    {
                        Clang.Ast.linkage = Clang__.Clang__bindings.External;
                        storage = Clang__.Clang__bindings.None;
                        function_type =
                            {
                                Clang.Ast.calling_conv = Clang__.Clang__bindings.C;
                                result =
                                {
                                    Clang.Ast.cxtype = <abstr>; type_loc = Some <abstr>;
                                    const = false; volatile = false; restrict = false;
                                    desc = Clang.Ast.BuiltinType Clang__.Clang__bindings.Int
                                };
                                parameters = None; exception_spec = None;
                                ref_qualifier = Clang__.Clang__bindings.None
                            };
                        nested_name_specifier = None;
                        name = Clang.Ast.IdentifierName "main";
                        body =
                            Some
                            {
                                Clang.Ast.decoration = Clang.Ast.Cursor <abstr>;
                                desc =
                                    Clang.Ast.Compound
                                    [
                                        {
                                            Clang.Ast.decoration = Clang.Ast.Cursor <abstr>;
                                            desc =
                                                Clang.Ast.Decl
                                                    [
                                                        {
                                                            Clang.Ast.decoration = Clang.Ast.Cursor <abstr>;
                                                            desc =
                                                                Clang.Ast.Var
                                                                {
                                                                    Clang.Ast.linkage = Clang__.Clang__bindings.NoLinkage;
                                                                    storage = Clang__.Clang__bindings.None;
                                                                    var_name = "a";
                                                                    var_type =
                                                                    {
                                                                        Clang.Ast.cxtype = <abstr>; type_loc = Some <abstr>;
                                                                        const = false; volatile = false; restrict = false;
                                                                        desc =
                                                                            Clang.Ast.BuiltinType Clang__.Clang__bindings.Int
                                                                    };
                                                                    var_init = None; constexpr = false; attributes = []
                                                                }
                                                        }
                                                    ]
                                        };
                                        { 
                                            Clang.Ast.decoration = Clang.Ast.Cursor <abstr>;
                                            desc =
                                                Clang.Ast.Expr
                                                {
                                                    Clang.Ast.decoration = Clang.Ast.Cursor <abstr>;
                                                    desc =
                                                        Clang.Ast.BinaryOperator
                                                        {
                                                            Clang.Ast.lhs =
                                                            {
                                                                Clang.Ast.decoration = Clang.Ast.Cursor <abstr>;
                                                                desc =
                                                                    Clang.Ast.DeclRef
                                                                    {
                                                                        Clang.Ast.nested_name_specifier = None;
                                                                        name = Clang.Ast.IdentifierName "a";
                                                                        template_arguments = []
                                                                    }
                                                            };
                                                            kind = Clang__.Clang__bindings.Assign;
                                                            rhs =
                                                            {
                                                                Clang.Ast.decoration = Clang.Ast.Cursor <abstr>;
                                                                desc =
                                                                    Clang.Ast.IntegerLiteral (Clang__Clang__ast.Int 2)
                                                            }
                                                        }
                                                }
                                            };
                                        {
                                            Clang.Ast.decoration = Clang.Ast.Cursor <abstr>;
                                            desc =
                                                Clang.Ast.Return
                                                (Some
                                                    {
                                                        Clang.Ast.decoration = Clang.Ast.Cursor <abstr>;
                                                        desc =
                                                            Clang.Ast.IntegerLiteral (Clang__Clang__ast.Int 0)
                                                    }
                                                )
                                        }
                                    ]
                            };
                        deleted = false; constexpr = false; inline_specified = false;
                        inlined = false; attributes = []; has_written_prototype = false
                    }
            };
            {
                Clang.Ast.decoration = Clang.Ast.Cursor <abstr>;
                desc =
                    Clang.Ast.Function
                    {
                        Clang.Ast.linkage = Clang__.Clang__bindings.External;
                        storage = Clang__.Clang__bindings.None;
                        function_type =
                        {
                            Clang.Ast.calling_conv = Clang__.Clang__bindings.C;
                            result =
                                {
                                    Clang.Ast.cxtype = <abstr>; type_loc = Some <abstr>;
                                    const = false; volatile = false; restrict = false;
                                    desc = Clang.Ast.BuiltinType Clang__.Clang__bindings.Int
                                };
                            parameters = None; exception_spec = None;
                            ref_qualifier = Clang__.Clang__bindings.None
                        };
                        nested_name_specifier = None;
                        name = Clang.Ast.IdentifierName "main2";
                        body =
                            Some
                                {
                                    Clang.Ast.decoration = Clang.Ast.Cursor <abstr>;
                                    desc =
                                        Clang.Ast.Compound
                                            [
                                                {
                                                    Clang.Ast.decoration = Clang.Ast.Cursor <abstr>;
                                                    desc =
                                                        Clang.Ast.Decl
                                                            [
                                                                {
                                                                    Clang.Ast.decoration = Clang.Ast.Cursor <abstr>;
                                                                    desc =
                                                                        Clang.Ast.Var
                                                                            {
                                                                                Clang.Ast.linkage = Clang__.Clang__bindings.NoLinkage;
                                                                                storage = Clang__.Clang__bindings.None;
                                                                                var_name = "a";
                                                                                var_type =
                                                                                    {
                                                                                        Clang.Ast.cxtype = <abstr>; type_loc = Some <abstr>;
                                                                                        const = false; volatile = false; restrict = false;
                                                                                        desc =
                                                                                            Clang.Ast.BuiltinType Clang__.Clang__bindings.Int
                                                                                    };
                                                                                var_init = None; 
                                                                                constexpr = false; 
                                                                                attributes = []
                                                                            }
                                                                }
                                                            ]
                                                };
                                                {
                                                    Clang.Ast.decoration = Clang.Ast.Cursor <abstr>;
                                                    desc =
                                                        Clang.Ast.Expr
                                                        {
                                                            Clang.Ast.decoration = Clang.Ast.Cursor <abstr>;
                                                            desc =
                                                                Clang.Ast.BinaryOperator
                                                                {
                                                                    Clang.Ast.lhs =
                                                                    {
                                                                        Clang.Ast.decoration = Clang.Ast.Cursor <abstr>;
                                                                        desc =
                                                                            Clang.Ast.DeclRef
                                                                            {
                                                                                Clang.Ast.nested_name_specifier = None;
                                                                                name = Clang.Ast.IdentifierName "a";
                                                                                template_arguments = []
                                                                            }
                                                                    };
                                                                    kind = Clang__.Clang__bindings.Assign;
                                                                    rhs =
                                                                    {
                                                                            Clang.Ast.decoration = Clang.Ast.Cursor <abstr>;
                                                                            desc =
                                                                                Clang.Ast.IntegerLiteral (Clang__Clang__ast.Int 2)
                                                                    }
                                                                }
                                                        }
                                                };
                                                {
                                                    Clang.Ast.decoration = Clang.Ast.Cursor <abstr>; desc = ...
                                                };
                                                    ...
                                            ]
                                };
                            deleted = ...; constexpr = ...; inline_specified = ...;
                            inlined = ...; attributes = ...; has_written_prototype = ...
                    }
            };
        ]
    }
}